Three features of this app:

1) Account creation
2) Authentication
3) Authorization

Three Types of request - 1 2 3 .....

First Step:
    client will send
    send "I" for 1
    send "A" for 2
    send "AA" for 3

When server recieves response i.e.  I,A or AA

it will call its specific functions.
for I => call account creation function.

============================================================
    Identitiy Sevice Protocol  (Client/Server as mentioned)
===========================================================
e.g in I => request, then server will send "1 OK" response to client,

1 means => Option 1 i.e, account creation and OK means All good.


at client side, we have to check if message contains ok, if not it
means server is not in mood to respond.


if client recieves (1,OK) message. It means server is accepting new account creation.

Then, server will send another message to demand username and password.

Client will send username and password like,  s.send(f"{username},{password}".encode(scheme))

Server will recieve both name and password.

Now server will talk with database to check, whether username already exists

server will send a message to client of format ("Boolean true/false,message")

if already exists, it will send ("false,exists") else: ("true,ok")

client will check for this status, if false... it will close its connection else go ahead and   
    client will send another message that will contain a request to allocate Resources.

    format => {"1/0 , "number of resorces, resources....."}
    For Example if client need resources the, it will send {1,1,R1}

server will allocate the resorces and close its connection


============================================================
    Authentication Protocol  (Client/Server as mentioned)
===========================================================

Server will send (2 Ok) message to client it means server is ready to Authenticate you.

Client will send client.send(f"{username},{password}".encode(scheme))
server will recieve and convert it into lower case and save in username and password varaible

server will querey the database to check whether the username exists or not
[At the end of this operation, client will send a response packet to the server]

["{status 1/0},{usernameFound 1/0},{passwordFound 1/0}/n
    {username},{password},{db_id}"]

    if exists : match passwords and get user's id from database

    if dont exists : end

============================================================
    Authorization Protocol  (Client/Server as mentioned)
===========================================================

Server will send (3 Ok) message to client it means server is ready to Authorize you.

Then we will call Authentication function from server and see the authentication protocol above

    For explanation, when we call authentication function from server it will (2 ok) message,
    So we will recive this message and call Authenticate mechanism on client side as well.... 
    On client it returns True -> Authenticated and False -> Not Authenticated
    Same on server side, we will call self.accountLogin() it returns a "response packet" of Type
    -> ["{status 1/0},{usernameFound 1/0},{passwordFound 1/0}/n
                {username},{password},{db_id}"]
    
    from response[0][0] we can check authentication status

At the end of authorization, the server will send a packet to client which contains 
result of authorization resquest.

Possible Structure of packet -> 
        [{Authentication Status 1/0}-{Resources Requested By Client to check Authorization}-
        
        {Resources Allocated to Client in db}]